     B   Main

ExampleString        ; start of packed string 
	DCD	#0x53595343	; ‘S’=0x53   ‘Y’=0x59   ‘S’=0x53   ‘C’=0x43
	DCD	#0x20333030
	DCD	#0x36210000	; 1st 00 is the null-terminator, 2nd 00 is just padding to fill the word

Main

; R0 = address of the packed string
  LEA   R0, [ ExampleString ]
; R1 = index of the character in the packed string ... test with several values
  MOV   R1, #5

; the following code puts the indexed character into the least significant byte of R0, 
;    and clears the remainder of R0

; ----   start of block to copy into  Fragment 2   ----

; R2 = offset to word containing indexed character
  LSR   R2, R1, ***		; divide index by 4
; R3 = word containing indexed character
  LDR   R3, [ ***, *** ]

; R1 = digit offset of indexed character in R3  (digit offset = 0, 1, 2 or 3)
  AND   R1, R1, ***

; need to shift character from current position to least significant byte  
;   need to shift 8 bits for each digit position
; R1 = number of digit shifts needed  
  MOV   R4, #3
  SUB   R1, R4, ***
  BEQ   DoneShiftLoop   ; if 0 shifts needed, then done shifting
; shift character into least significant byte
ShiftLoop
  LSR   R3, R3, ***
  SUB   R1, R1, #1
  BNE   ShiftLoop
DoneShiftLoop
; R3 now has indexed character in least significant byte, 
;   but may have additional characters in higher bits 
; R0 = indexed character with higher bits cleared
  AND   R0, R3, *** 

; ----   end of block to copy into  Fragment 2   ----

  DCD  #0xFFFFFFFF		; stop
  